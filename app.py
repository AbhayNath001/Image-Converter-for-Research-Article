import fitz
from PIL import Image
from io import BytesIO
from flask import Flask, render_template, request, send_file

app = Flask(__name__)

# Helper function to embed digital signature
def embed_digital_signature(img):
    message = "Generated by Conversion Software - Cite: example.com"
    encoded = message + "%%%"
    binary_msg = ''.join(format(ord(c), '08b') for c in encoded)
    idx = 0
    pixels = img.load()
    
    for row in range(img.height):
        for col in range(img.width):
            if idx >= len(binary_msg):
                return img
            r, g, b = pixels[col, row][:3]
            r = (r & 0xFE) | int(binary_msg[idx])
            idx += 1
            if idx >= len(binary_msg):
                pixels[col, row] = (r, g, b)
                return img
            g = (g & 0xFE) | int(binary_msg[idx])
            idx += 1
            if idx >= len(binary_msg):
                pixels[col, row] = (r, g, b)
                return img
            b = (b & 0xFE) | int(binary_msg[idx])
            idx += 1
            pixels[col, row] = (r, g, b)
    return img

def convert_image(input_file, output_format, dpi):
    img = Image.open(input_file)
    
    if output_format == 'JPEG' and img.mode != 'RGB':
        img = img.convert('RGB')
    
    img = embed_digital_signature(img)
    
    buffer = BytesIO()
    save_args = {
        'format': output_format,
        'dpi': (dpi, dpi),
    }
    
    if output_format == 'TIFF':
        save_args['compression'] = 'tiff_deflate'
    elif output_format == 'JPEG':
        save_args['quality'] = 95
    
    img.save(buffer, **save_args)
    buffer.seek(0)
    return buffer

def pdf_to_tiff(pdf_file, dpi):
    pdf_document = fitz.open(stream=pdf_file.read(), filetype="pdf")
    buffers = []
    
    for page_num in range(len(pdf_document)):
        page = pdf_document[page_num]
        matrix = fitz.Matrix(dpi / 72, dpi / 72)
        pix = page.get_pixmap(matrix=matrix)
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        
        img = embed_digital_signature(img)
        
        buffer = BytesIO()
        img.save(buffer, format='TIFF', compression='tiff_deflate', dpi=(dpi, dpi))
        buffer.seek(0)
        buffers.append(buffer)
    
    pdf_document.close()
    return buffers

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/convert', methods=['POST'])
def convert():
    file = request.files['file']
    conversion_type = request.form['conversion_type']
    dpi = int(request.form['dpi'])
    
    filename = file.filename
    ext = filename.rsplit('.', 1)[1].lower()
    
    try:
        if conversion_type == 'pdf_to_tiff':
            if ext != 'pdf':
                return "Invalid file type for PDF conversion", 400
            buffers = pdf_to_tiff(file, dpi)
            return send_file(buffers[0], mimetype='image/tiff', as_attachment=True, download_name=f'{filename}_{dpi}DPI.tiff')
        
        elif conversion_type == 'image_to_tiff':
            if ext not in ['jpg', 'jpeg', 'png', 'tiff']:
                return "Unsupported image format", 400
            buffer = convert_image(file, 'TIFF', dpi)
            return send_file(buffer, mimetype='image/tiff', as_attachment=True, download_name=f'{filename}_{dpi}DPI.tiff')
        
        elif conversion_type == 'tiff_to_jpeg':
            if ext not in ['tiff', 'tif']:
                return "Invalid file type for TIFF conversion", 400
            buffer = convert_image(file, 'JPEG', dpi)
            return send_file(buffer, mimetype='image/jpeg', as_attachment=True, download_name=f'{filename}_{dpi}DPI.jpg')
        
    except Exception as e:
        return f"Conversion failed: {str(e)}", 500

if __name__ == '__main__':
    app.run(debug=True)